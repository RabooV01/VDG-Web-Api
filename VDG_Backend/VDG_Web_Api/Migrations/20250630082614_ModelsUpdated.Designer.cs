// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VDG_Web_Api.src.Data;

#nullable disable

namespace VDG_Web_Api.Migrations
{
    [DbContext(typeof(VdgDbDemoContext))]
    [Migration("20250630082614_ModelsUpdated")]
    partial class ModelsUpdated
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("VDG_Web_Api.src.Models.ClinicWorkTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClinicId")
                        .HasColumnType("int")
                        .HasColumnName("Clinic_Id");

                    b.Property<TimeOnly>("EndWorkHours")
                        .HasColumnType("time")
                        .HasColumnName("End_WorkHours");

                    b.Property<TimeOnly>("StartWorkHours")
                        .HasColumnType("time")
                        .HasColumnName("Start_WorkHours");

                    b.HasKey("Id")
                        .HasName("PK__WorkTime");

                    b.HasIndex("ClinicId");

                    b.ToTable("Clinic_WorkTime");
                });

            modelBuilder.Entity("VDG_Web_Api.src.Models.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SpecialityId")
                        .HasColumnType("int")
                        .HasColumnName("Speciality_Id");

                    b.Property<string>("SyndicateId")
                        .IsRequired()
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("Syndicate_Id");

                    b.Property<double>("TicketCost")
                        .HasColumnType("float")
                        .HasColumnName("Ticket_Cost");

                    b.Property<int>("TicketOption")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .HasColumnName("Ticket_Status");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.HasKey("Id")
                        .HasName("PK__Doctor__B5BD6B27701103BA");

                    b.HasIndex("SpecialityId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Doctor");
                });

            modelBuilder.Entity("VDG_Web_Api.src.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("Birthdate")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("First_Name");

                    b.Property<string>("Gender")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("Last_Name");

                    b.Property<string>("PersonalId")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("Personal_Id");

                    b.Property<string>("Phone")
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)");

                    b.HasKey("Id")
                        .HasName("PK__Person__3214EC07A0A03B3C");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("VDG_Web_Api.src.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DoctorId")
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .HasColumnName("Doctor_Id");

                    b.HasKey("Id")
                        .HasName("PK__Post__3214EC07FAD031E1");

                    b.HasIndex("DoctorId");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("VDG_Web_Api.src.Models.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Act")
                        .HasColumnType("float");

                    b.Property<double>("AvgService")
                        .HasColumnType("float")
                        .HasColumnName("Avg_Service");

                    b.Property<double>("AvgWait")
                        .HasColumnType("float")
                        .HasColumnName("Avg_Wait");

                    b.Property<int?>("DoctorId")
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .HasColumnName("Doctor_Id");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.HasKey("Id")
                        .HasName("PK__Rating__3214EC07B32B9B16");

                    b.HasIndex("DoctorId");

                    b.HasIndex("UserId");

                    b.ToTable("Rating");
                });

            modelBuilder.Entity("VDG_Web_Api.src.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ScheduledAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.Property<int?>("VirtualId")
                        .HasColumnType("int")
                        .HasColumnName("Virtual_Id");

                    b.HasKey("Id")
                        .HasName("PK__tmp_ms_x__3214EC07765A5547");

                    b.HasIndex("UserId");

                    b.HasIndex("VirtualId");

                    b.ToTable("Reservation");
                });

            modelBuilder.Entity("VDG_Web_Api.src.Models.Speciality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id")
                        .HasName("PK__Speciali__3214EC074808F671");

                    b.ToTable("Speciality");
                });

            modelBuilder.Entity("VDG_Web_Api.src.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("CloseDate")
                        .HasColumnType("date")
                        .HasColumnName("Close_Date");

                    b.Property<int?>("DoctorId")
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .HasColumnName("Doctor_Id");

                    b.Property<string>("Status")
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_Id");

                    b.HasKey("Id")
                        .HasName("PK__Ticket__3214EC076F6CA0F8");

                    b.HasIndex("DoctorId");

                    b.HasIndex("UserId");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("VDG_Web_Api.src.Models.TicketMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OwnerId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int")
                        .HasColumnName("Ticket_Id");

                    b.HasKey("Id")
                        .HasName("PK__Ticket_M__3214EC079464AE2E");

                    b.HasIndex("TicketId");

                    b.ToTable("Ticket_Message");
                });

            modelBuilder.Entity("VDG_Web_Api.src.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("Password_Hash");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("Person_Id");

                    b.Property<string>("Role")
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)");

                    b.HasKey("Id")
                        .HasName("PK__User__3214EC071AAE95BF");

                    b.HasIndex("PersonId")
                        .IsUnique()
                        .HasFilter("[Person_Id] IS NOT NULL");

                    b.ToTable("User");
                });

            modelBuilder.Entity("VDG_Web_Api.src.Models.VirtualClinic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AvgService")
                        .HasColumnType("int")
                        .HasColumnName("Avg_Service");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("Doctor_Id");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<double?>("PreviewCost")
                        .HasColumnType("float")
                        .HasColumnName("Preview_Cost");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("PK__Virtual___3214EC078277E8B9");

                    b.HasIndex("DoctorId");

                    b.ToTable("Virtual_Clinic");
                });

            modelBuilder.Entity("VDG_Web_Api.src.Models.ClinicWorkTime", b =>
                {
                    b.HasOne("VDG_Web_Api.src.Models.VirtualClinic", "Clinic")
                        .WithMany("WorkTimes")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Clinic_WorkTime_FK");

                    b.Navigation("Clinic");
                });

            modelBuilder.Entity("VDG_Web_Api.src.Models.Doctor", b =>
                {
                    b.HasOne("VDG_Web_Api.src.Models.Speciality", "Speciality")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Doctor_Speciality_FK");

                    b.HasOne("VDG_Web_Api.src.Models.User", "User")
                        .WithOne()
                        .HasForeignKey("VDG_Web_Api.src.Models.Doctor", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Doctor_User_FK");

                    b.Navigation("Speciality");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VDG_Web_Api.src.Models.Post", b =>
                {
                    b.HasOne("VDG_Web_Api.src.Models.Doctor", "Doctor")
                        .WithMany("Posts")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Post_Doctor_FK");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("VDG_Web_Api.src.Models.Rating", b =>
                {
                    b.HasOne("VDG_Web_Api.src.Models.Doctor", "Doctor")
                        .WithMany("Ratings")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("Rating_Doctor_FK");

                    b.HasOne("VDG_Web_Api.src.Models.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("Rating_User_FK");

                    b.Navigation("Doctor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VDG_Web_Api.src.Models.Reservation", b =>
                {
                    b.HasOne("VDG_Web_Api.src.Models.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .HasConstraintName("Reservation_User_FK");

                    b.HasOne("VDG_Web_Api.src.Models.VirtualClinic", "Virtual")
                        .WithMany("Reservations")
                        .HasForeignKey("VirtualId")
                        .HasConstraintName("Reservation_Virtual_FK");

                    b.Navigation("User");

                    b.Navigation("Virtual");
                });

            modelBuilder.Entity("VDG_Web_Api.src.Models.Ticket", b =>
                {
                    b.HasOne("VDG_Web_Api.src.Models.Doctor", "Doctor")
                        .WithMany("Tickets")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("Ticket_Doctor_FK");

                    b.HasOne("VDG_Web_Api.src.Models.User", "User")
                        .WithMany("Tickets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("Ticket_User_FK");

                    b.Navigation("Doctor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VDG_Web_Api.src.Models.TicketMessage", b =>
                {
                    b.HasOne("VDG_Web_Api.src.Models.Ticket", "Ticket")
                        .WithMany("TicketMessages")
                        .HasForeignKey("TicketId")
                        .HasConstraintName("Message_Ticket_FK");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("VDG_Web_Api.src.Models.User", b =>
                {
                    b.HasOne("VDG_Web_Api.src.Models.Person", "Person")
                        .WithOne()
                        .HasForeignKey("VDG_Web_Api.src.Models.User", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("User_Person_FK");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("VDG_Web_Api.src.Models.VirtualClinic", b =>
                {
                    b.HasOne("VDG_Web_Api.src.Models.Doctor", "Doctor")
                        .WithMany("VirtualClinics")
                        .HasForeignKey("DoctorId")
                        .HasConstraintName("Clinic_Doctor_FK");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("VDG_Web_Api.src.Models.Doctor", b =>
                {
                    b.Navigation("Posts");

                    b.Navigation("Ratings");

                    b.Navigation("Tickets");

                    b.Navigation("VirtualClinics");
                });

            modelBuilder.Entity("VDG_Web_Api.src.Models.Speciality", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("VDG_Web_Api.src.Models.Ticket", b =>
                {
                    b.Navigation("TicketMessages");
                });

            modelBuilder.Entity("VDG_Web_Api.src.Models.User", b =>
                {
                    b.Navigation("Ratings");

                    b.Navigation("Reservations");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("VDG_Web_Api.src.Models.VirtualClinic", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("WorkTimes");
                });
#pragma warning restore 612, 618
        }
    }
}
